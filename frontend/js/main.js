/**
 * Function to handle click event on edit spanner schema button of table
 *
 * @param {HTMLElement} event click event
 * @param {array} spPlaceholder array to store number of selected constraints in spanner constraint cell
 * @param {array} tablePkArray array to store primary keys of a table
 * @param {array} columnsNotNullConstraint array to store not null constraint value for all columns of a particular table
 * @param {array} tableOriginalColNames array to store original column names of a particular table
 * @param {array} notPrimaryArray array to store whether column of a particular table is PK or not
 * @return {null}
 */
const editAndSaveButtonHandler = (event, spPlaceholder, tablePkArray, columnsNotNullConstraint, tableOriginalColNames, notPrimaryArray) => {
  if (event[0].innerText === "Edit Spanner Schema") {
    editSpannerHandler(event, tablePkArray, columnsNotNullConstraint, tableOriginalColNames, notPrimaryArray);
  }
  else if (event[0].innerText === "Save Changes") {
    saveSpannerChanges(event, spPlaceholder, columnsNotNullConstraint);
  }
}

/**
 * Function to handle spanner table editing
 *
 * @param {event} event event generated by clicking edit spanner button
 * @param {array} tablePkArray array to store primary keys of a table
 * @param {array} columnsNotNullConstraint array to store not null constraint value for all columns of a particular table
 * @param {array} tableOriginalColNames array to store original column names of a particular table
 * @param {array} notPrimaryArray array to store whether column of a particular table is PK or not
 * @return {null}
 */
const editSpannerHandler = (event, tablePkArray, columnsNotNullConstraint, tableOriginalColNames, notPrimaryArray) => {
  let uncheckCount = [];
  let tableNumber = parseInt(event.attr('id').match(/\d+/), 10);
  let tableId = '#src-sp-table' + tableNumber + ' tr';
  let tableColumnNumber = 0;
  let tableCheckboxGroup = '.chckClass_' + tableNumber;
  let $selectAll, $selectEachRow;
  jQuery('#editInstruction' + tableNumber).css('visibility', 'hidden');
  if (event.html() === 'Edit Spanner Schema') {
    jQuery(event[0]).removeAttr('data-toggle');
  }
  event.html("Save Changes");
  uncheckCount[tableNumber] = 0;
  jQuery(tableId).each(function (index) {
    if (index === 1) {
      $selectAll = jQuery(this).find('.bmd-form-group.is-filled.template');
      $selectAll.removeClass('template');
      $selectAll.find('input').attr('id', 'chckAll_' + tableNumber);
    }
    var checkAllTableNumber = jQuery('#chckAll_' + tableNumber);
    var checkClassTableNumber = jQuery('.chckClass_' + tableNumber);
    checkAllTableNumber.prop('checked', true);
    checkAllTableNumber.click(function () {
      tableNumber = parseInt(jQuery(this).attr('id').match(/\d+/), 10);
      checkClassTableNumber = jQuery('.chckClass_' + tableNumber);
      switch (jQuery(this).is(':checked')) {
        case true:
          checkClassTableNumber.prop('checked', true);
          uncheckCount[tableNumber] = 0;
          break;
        case false:
          checkClassTableNumber.prop('checked', false);
          uncheckCount[tableNumber] = Object.keys(schemaConversionObj.ToSpanner[schemaConversionObj.SpSchema[srcTableName[tableNumber]].Name].Cols).length;
          break;
      }
    });
    if (index > 1) {
      $selectEachRow = jQuery(this).find('.bmd-form-group.is-filled.eachRowChckBox.template');
      $selectEachRow.removeClass('template');
      $selectEachRow.find('input').attr('id', 'chckBox_' + tableColumnNumber);
      $selectEachRow.find('input').addClass('chckClass_' + tableNumber);
      jQuery(tableCheckboxGroup).prop('checked', true);
      let spannerCellsList = document.getElementsByClassName('spannerTabCell' + tableNumber + tableColumnNumber);
      if (spannerCellsList) {
        editSpannerColumnName(tableNumber, tableColumnNumber, tablePkArray, tableOriginalColNames, notPrimaryArray);
        editSpannerDataType(tableNumber, tableColumnNumber);
        editSpannerConstraint(spannerCellsList[2], tableNumber, tableColumnNumber, columnsNotNullConstraint);
      }
      tableColumnNumber++;
    }
  });
  checkClassTableNumber = jQuery('.chckClass_' + tableNumber);
  checkClassTableNumber.click(function () {
    tableNumber = parseInt(jQuery(this).closest("table").attr('id').match(/\d+/), 10);
    tableColumnNumber = parseInt(jQuery(this).attr('id').match(/\d+/), 10);
    checkAllTableNumber = jQuery('#chckAll_' + tableNumber);
    if (jQuery(this).is(":checked")) {
      uncheckCount[tableNumber] = uncheckCount[tableNumber] - 1;
      if (uncheckCount[tableNumber] === 0) {
        checkAllTableNumber.prop('checked', true);
      }
    }
    else {
      uncheckCount[tableNumber] = uncheckCount[tableNumber] + 1;
      checkAllTableNumber.prop('checked', false);
    }
  });
  // edit Fk handler
  let fkLength;
  let jsonObj = JSON.parse(localStorage.getItem('conversionReportContent'));
  if (jsonObj.SpSchema[srcTableName[tableNumber]].Fks != null && jsonObj.SpSchema[srcTableName[tableNumber]].Fks.length != 0) {
    fkLength = jsonObj.SpSchema[srcTableName[tableNumber]].Fks.length;
    for (var x = 0; x < fkLength; x++) {
      let $fkRow = jQuery('#renameFk' + tableNumber + x).removeClass('template');
      jQuery('#saveFk' + tableNumber + x).addClass('template');
      $fkRow.find("input").attr('id', 'newFkVal' + tableNumber + x);
      $fkRow.find("input").val(jsonObj.SpSchema[srcTableName[tableNumber]].Fks[x].Name);
    }
  }
  // edit Secondary Indexes handler
  let secIndexLength;
  jsonObj = JSON.parse(localStorage.getItem('conversionReportContent'));
  if (jsonObj.SpSchema[srcTableName[tableNumber]].Indexes != null && jsonObj.SpSchema[srcTableName[tableNumber]].Indexes.length != 0) {
    secIndexLength = jsonObj.SpSchema[srcTableName[tableNumber]].Indexes.length;
    for (var x = 0; x < secIndexLength; x++) {
      let $secIndexRow = jQuery('#renameSecIndex' + tableNumber + x).removeClass('template');
      jQuery('#saveSecIndex' + tableNumber + x).addClass('template');
      $secIndexRow.find("input").attr('id', 'newSecIndexVal' + tableNumber + x);
      $secIndexRow.find("input").val(jsonObj.SpSchema[srcTableName[tableNumber]].Indexes[x].Name);
    }
  }
}

/**
 * Function to edit column name for spanner table
 *
 * @param {number} tableNumber
 * @param {number} tableColumnNumber
 * @param {array} tablePkArray array to store primary keys of a table
 * @param {array} tableOriginalColNames array to store original column names of a particular table
 * @param {array} notPrimaryArray array to store whether column of a particular table is PK or not
 * @return {null}
 */
const editSpannerColumnName = (tableNumber, tableColumnNumber, tablePkArray, tableOriginalColNames, notPrimaryArray) => {
  let columnNameVal = document.getElementById('columnNameText' + tableNumber + tableColumnNumber + tableColumnNumber).innerHTML;
  let currSeqId = '';
  let pkArrayLength = tablePkArray.length;
  tableOriginalColNames.push(columnNameVal);
  for (var x = 0; x < pkArrayLength; x++) {
    if (tablePkArray[x].Col === columnNameVal.trim()) {
      currSeqId = tablePkArray[x].seqId;
    }
  }
  let $editColumnName = jQuery('#editColumnName' + tableNumber + tableColumnNumber).removeClass('template');
  $editColumnName.find('.column.right.form-group > input').attr('id', 'columnNameText' + tableNumber + tableColumnNumber + tableColumnNumber);
  $editColumnName.find('.column.right.form-group > input').attr('value', columnNameVal);
  jQuery('#saveColumnName' + tableNumber + tableColumnNumber).addClass('template');
  if (notPrimaryArray[tableColumnNumber] === false) {
    $editColumnName.find('.column.left.keyMargin.keyClick > img').attr('src', './Icons/Icons/ic_vpn_key_24px.svg');
    $editColumnName.find('.column.left.keyMargin.keyClick > sub').html(currSeqId);
    $editColumnName.find('.column.left.keyMargin.keyClick').addClass('keyActive');
    $editColumnName.find('.column.left.keyMargin.keyClick').removeClass('keyNotActive');
  }
}

/**
 * Function to edit data type for spanner table
 *
 * @param {number} tableNumber
 * @param {number} tableColumnNumber
 * @return {null}
 */
const editSpannerDataType = (tableNumber, tableColumnNumber) => {
  jQuery(this).off('change');
  let spannerCellValue = jQuery('#saveDataType' + tableNumber + tableColumnNumber).html();
  let srcCellValue, $dataTypeOption;
  let srcCellValueEle = document.getElementById('srcDataType' + tableNumber + tableColumnNumber);
  let dataTypeArray = null;
  let globalDataTypes = JSON.parse(localStorage.getItem('globalDataTypeList'));
  let globalDataTypesLength = Object.keys(globalDataTypes).length;
  let $editDataType = jQuery('#editDataType' + tableNumber + tableColumnNumber).removeClass('template');
  if (srcCellValueEle) {
    srcCellValue = srcCellValueEle.innerHTML;
  }
  for (var a = 0; a < globalDataTypesLength; a++) {
    if (srcCellValue.toLowerCase() === (Object.keys(globalDataTypes)[a]).toLowerCase()) {
      dataTypeArray = globalDataTypes[Object.keys(globalDataTypes)[a]];
      break;
    }
  }
  $editDataType.find('select').attr('id', 'dataType' + tableNumber + tableColumnNumber + tableColumnNumber);
  jQuery('#saveDataType' + tableNumber + tableColumnNumber).addClass('template');
  if (dataTypeArray !== null) {
    let dataTypeArrayLength = dataTypeArray.length;
    for (var a = 0; a < dataTypeArrayLength; a++) {
      $dataTypeOption = $editDataType.find('.dataTypeOption.template').clone().removeClass('template');
      if (spannerCellValue == dataTypeArray[a].T) {
        $dataTypeOption.attr('value', dataTypeArray[a].T);
        $dataTypeOption.html(dataTypeArray[a].T);
        $dataTypeOption.attr('selected', 'selected');
      }
      else {
        $dataTypeOption.attr('value', dataTypeArray[a].T);
        $dataTypeOption.html(dataTypeArray[a].T);
      }
      $dataTypeOption.appendTo($editDataType.find('select'));
    }
  }
  else {
    $dataTypeOption = $editDataType.find('.dataTypeOption.template').clone().removeClass('template');
    $dataTypeOption.attr('value', spannerCellValue);
    $dataTypeOption.html(spannerCellValue);
    $dataTypeOption.appendTo($editDataType.find('select'));
  }
  jQuery($editDataType.find('select')).find("option").eq(0).remove();
}

/**
 * Function to edit constraint for spanner table
 *
 * @param {html Element} editColumn
 * @param {number} tableNumber
 * @param {number} tableColumnNumber
 * @param {array} columnsNotNullConstraint array to store not null constraint value for all columns of a particular table
 * @return {null}
 */
const editSpannerConstraint = (editColumn, tableNumber, tableColumnNumber, columnsNotNullConstraint) => {
  let notNullFound = '';
  let constraintId = 'spConstraint' + tableNumber + tableColumnNumber;
  if (columnsNotNullConstraint[tableColumnNumber] === true) {
    notNullFound = "<option class='active' selected>Not Null</option>";
  }
  else if (columnsNotNullConstraint[tableColumnNumber] === false) {
    notNullFound = "<option>Not Null</option>";
  }
  constraintHtml = "<select id=" + constraintId + " multiple size='0' class='form-control spanner-input tableSelect' >"
    + notNullFound
    + "</select>";
  editColumn.innerHTML = constraintHtml;
  new vanillaSelectBox("#spConstraint" + tableNumber + tableColumnNumber, {
    placeHolder: "Select Constraints",
    maxWidth: 500,
    maxHeight: 300
  });
  jQuery('#spConstraint' + tableNumber + tableColumnNumber).on('change', function () {
    let idNum = parseInt(jQuery(this).attr('id').match(/\d+/g), 10);
    let constraints = document.getElementById(constraintId);
    constraintId = jQuery(this).attr('id');
    notNullConstraint[idNum] = '';
    if (constraints) {
      let constraintsLength = constraints.length;
      for (var c = 0; c < constraintsLength; c++) {
        if (constraints.options[c].selected) {
          notNullConstraint[idNum] = 'Not Null';
        }
      }
    }
  });
}

/**
 * Function to recreate table after making changes
 *
 * @param {json} schemaConversionObj json object to fetch new changes of table
 * @param {number} tableNumber
 * @param {string} tableName
 * @return {null}
 */
const createTableAfterChanges = async (schemaConversionObj, tableNumber, tableName) => {
  let ddl = JSON.parse(localStorage.getItem('ddlStatementsContent'));
  let summary = JSON.parse(localStorage.getItem('summaryReportContent'));
  let constraintId;
  let pksSp = [], initialColNameArray = [], pkSeqId = [], notNullFoundFlag = [], constraintTabCell = [], primaryTabCell = [], spPlaceholder = [], srcPlaceholder = [], countSp = [], countSrc = [];
  let sourceTableFlag = '';
  let srcTable, spTable, columnsLength, currentColumnSp, currentColumnSrc, pksSpLength, $convTableContent;
  let conversionRateResp = {};
  conversionRateResp = JSON.parse(localStorage.getItem('tableBorderColor'));
  initialColNameArray[tableNumber] = [];
  constraintTabCell[tableNumber] = [];
  primaryTabCell[tableNumber] = [];
  notPrimary[tableNumber] = [];
  notNullFoundFlag[tableNumber] = [];
  pkArray[tableNumber] = [];
  srcPlaceholder[tableNumber] = [];
  spPlaceholder[tableNumber] = [];
  countSp[tableNumber] = [];
  countSrc[tableNumber] = [];
  pksSp[tableNumber] = [];
  conversionRateResp = JSON.parse(localStorage.getItem('tableBorderColor'));
  sourceTableFlag = localStorage.getItem('sourceDbName');
  columnsLength = Object.keys(schemaConversionObj.ToSpanner[tableName].Cols).length;
  spTable = schemaConversionObj.SpSchema[tableName];
  srcTable = schemaConversionObj.SrcSchema[tableName];

  pkArray[tableNumber] = schemaConversionObj.SpSchema[Object.keys(schemaConversionObj.SpSchema)[tableNumber]].Pks;
  pkSeqId[tableNumber] = 1;
  pkArrayLength = pkArray[tableNumber].length;
  if (pkArrayLength === 1 && pkArray[tableNumber][0].Col === 'synth_id')
    pkArrayLength = 0;
  columnsLength = Object.keys(schemaConversionObj.ToSpanner[spTable.Name].Cols).length;
  for (var x = 0; x < pkArrayLength; x++) {
    if (pkArray[tableNumber][x].seqId == undefined) {
      pkArray[tableNumber][x].seqId = pkSeqId[tableNumber];
      pkSeqId[tableNumber]++;
    }
  }
  schemaConversionObj.SpSchema[srcTableName[tableNumber]].Pks = pkArray[tableNumber];
  var table = jQuery('#src-sp-table' + tableNumber).DataTable();
  table.destroy();
  jQuery('#' + tableNumber).find('.acc-table').html(`<thead>
  <tr>
      <th class='acc-column' colspan='2'>Column Name</th>
      <th class='acc-column' colspan='2'>Data Type</th>
      <th class='acc-column' colspan='2'>Constraints</th>
  </tr>
  <tr>
      <th class='acc-table-th-src src-tab-cell'>
          <span class="bmd-form-group is-filled template">
              <div class="checkbox">
                  <label>
                      <input type="checkbox" value="">
                      <span class="checkbox-decorator"><span
                              class="check"
                              style='margin-left: -7px;'></span>
                          <div class="ripple-container"></div>
                      </span>
                  </label>
              </div>
          </span>
      </th>
      <th class='acc-table-th-spn'>Spanner</th>
      <th class='acc-table-th-src'></th>
      <th class='acc-table-th-spn'>Spanner</th>
      <th class='acc-table-th-src'></th>
      <th class='acc-table-th-spn'>Spanner</th>
  </tr>
</thead>

<tbody class='acc-table-body'></tbody>`);
  jQuery('#' + tableNumber).find('.acc-table-th-src').append(sourceTableFlag);
  for (var k = 0; k < columnsLength; k++) {
    $convTableContent = jQuery('.reportTableContent.template').clone().removeClass('template');
    currentColumnSrc = Object.keys(schemaConversionObj.ToSpanner[tableName].Cols)[k];
    currentColumnSp = schemaConversionObj.ToSpanner[tableName].Cols[currentColumnSrc];
    pksSp[tableNumber] = [...spTable.Pks];
    pksSpLength = pksSp[tableNumber].length;
    $convTableContent.find('.saveColumnName.template').removeClass('template').attr('id', 'saveColumnName' + tableNumber + k);
    $convTableContent.find('.editColumnName.template').attr('id', 'editColumnName' + tableNumber + k);
    $convTableContent.find('.editDataType.template').attr('id', 'editDataType' + tableNumber + k);
    $convTableContent.find('.saveConstraint.template').removeClass('template').attr('id', 'saveConstraint' + tableNumber + k);
    $convTableContent.find('.editConstraint.template').attr('id', 'editConstraint' + tableNumber + k);
    if (srcTable.PrimaryKeys === null || srcTable.PrimaryKeys[0].Column !== currentColumnSrc) {
      $convTableContent.find('.srcPk').css('visibility', 'hidden');
    }
    $convTableContent.find('.column.right.srcColumn').html(currentColumnSrc);
    $convTableContent.find('.column.right.srcColumn').attr('id', 'srcColumn' + k);

    $convTableContent.find('.sp-column.acc-table-td.spannerColName').addClass('spannerTabCell' + tableNumber + k);
    pkFlag = false;
    for (var x = 0; x < pksSpLength; x++) {
      if (pksSp[tableNumber][x].Col === currentColumnSp) {
        pkFlag = true;
        $convTableContent.find('.column.left.spannerPkSpan').attr('data-toggle', 'tooltip');
        $convTableContent.find('.column.left.spannerPkSpan').attr('data-placement', 'bottom');
        $convTableContent.find('.column.left.spannerPkSpan').attr('title', 'primary key: ' + currentColumnSp);
        $convTableContent.find('.column.left.spannerPkSpan').attr('id', 'keyIcon' + tableNumber + k + k);
        $convTableContent.find('.column.left.spannerPkSpan').css('cursor', 'pointer');
        $convTableContent.find('.column.left.spannerPkSpan > sub').html(pksSp[tableNumber][x].seqId);

        $convTableContent.find('.column.right.spannerColNameSpan').attr('data-toggle', 'tooltip');
        $convTableContent.find('.column.right.spannerColNameSpan').attr('data-placement', 'bottom');
        $convTableContent.find('.column.right.spannerColNameSpan').attr('title', 'primary key: ' + currentColumnSp);
        $convTableContent.find('.column.right.spannerColNameSpan').attr('id', 'columnNameText' + tableNumber + k + k);
        $convTableContent.find('.column.right.spannerColNameSpan').css('cursor', 'pointer');
        $convTableContent.find('.column.right.spannerColNameSpan').html(currentColumnSp);
        notPrimary[tableNumber][k] = false;
        break
      }
    }
    if (pkFlag === false) {
      notPrimary[tableNumber][k] = true;
      $convTableContent.find('.column.left.spannerPkSpan').attr('id', 'keyIcon' + tableNumber + k + k);
      $convTableContent.find($convTableContent.find('.column.left.spannerPkSpan > img')).css('visibility', 'hidden');
      $convTableContent.find('.column.right.spannerColNameSpan').attr('id', 'columnNameText' + tableNumber + k + k);
      $convTableContent.find('.column.right.spannerColNameSpan').html(currentColumnSp);
    }
    primaryTabCell[tableNumber][k] = $convTableContent;
    keyIconValue = 'keyIcon' + tableNumber + k + k;
    keyColumnObj = { 'keyIconId': keyIconValue, 'columnName': currentColumnSp };

    $convTableContent.find('.acc-table-td.srcDataType').attr('id', 'srcDataType' + tableNumber + k);
    $convTableContent.find('.acc-table-td.srcDataType').html(srcTable.ColDefs[currentColumnSrc].Type.Name);
    $convTableContent.find('.sp-column.acc-table-td.spannerDataType').attr('id', 'dataType' + tableNumber + k);
    $convTableContent.find('.saveDataType.template').removeClass('template').attr('id', 'saveDataType' + tableNumber + k).html(spTable.ColDefs[currentColumnSp].T.Name);
    $convTableContent.find('.sp-column.acc-table-td.spannerDataType').addClass('spannerTabCell' + tableNumber + k);

    countSrc[tableNumber][k] = 0;
    srcPlaceholder[tableNumber][k] = countSrc[tableNumber][k];
    if (srcTable.ColDefs[currentColumnSrc].NotNull !== undefined) {
      if (srcTable.ColDefs[currentColumnSrc].NotNull === true) {
        countSrc[tableNumber][k] = countSrc[tableNumber][k] + 1;
        srcPlaceholder[tableNumber][k] = countSrc[tableNumber][k];
        $convTableContent.find('.srcNotNullConstraint').addClass('active');
      }
    }
    constraintId = 'srcConstraint' + tableNumber + k;
    $convTableContent.find('.form-control.spanner-input.tableSelect.srcConstraint').attr('id', constraintId);

    countSp[tableNumber][k] = 0;
    spPlaceholder[tableNumber][k] = countSp[tableNumber][k];
    $convTableContent.find('.acc-table-td.sp-column.acc-table-td').addClass('spannerTabCell' + tableNumber + k);
    // checking not null consraint
    if (spTable.ColDefs[currentColumnSp].NotNull !== undefined) {
      if (spTable.ColDefs[currentColumnSp].NotNull === true) {
        countSp[tableNumber][k] = countSp[tableNumber][k] + 1
        spPlaceholder[tableNumber][k] = countSp[tableNumber][k];
        $convTableContent.find('.spannerNotNullConstraint').addClass('active');
        notNullFoundFlag[tableNumber][k] = true;
        notNullConstraint[parseInt(String(tableNumber) + String(k))] = 'Not Null';
      }
      else {
        notNullFoundFlag[tableNumber][k] = false;
        notNullConstraint[parseInt(String(tableNumber) + String(k))] = '';
      }
    }
    constraintId = 'spConstraint' + tableNumber + k;
    $convTableContent.find('.form-control.spanner-input.tableSelect.spannerConstraint').attr('id', constraintId)
    constraintTabCell[tableNumber][k] = $convTableContent;
    $convTableContent.appendTo(jQuery('#' + tableNumber).find('.acc-table-body'));
  }
  jQuery('#src-sp-table' + tableNumber).DataTable();
  for (var j = 0; j < columnsLength; j++) {
    if (document.getElementById('srcConstraint' + tableNumber + j) != null) {
      new vanillaSelectBox('#srcConstraint' + tableNumber + j, {
        placeHolder: srcPlaceholder[tableNumber][j] + " constraints selected",
        maxWidth: 500,
        maxHeight: 300
      });
    }
    if (document.getElementById('spConstraint' + tableNumber + j) != null) {
      new vanillaSelectBox('#spConstraint' + tableNumber + j, {
        placeHolder: spPlaceholder[tableNumber][j] + " constraints selected",
        maxWidth: 500,
        maxHeight: 300
      });
    }
  }
  jQuery('#' + tableNumber).find('.mdc-card.summary-content').html(JSON.parse(localStorage.getItem('summaryReportContent'))[tableName].split('\n').join('<br />'));
  jQuery('#ddl' + tableNumber).find('.mdc-card.mdc-card-content.ddl-border.table-card-border').addClass(mdcCardBorder(conversionRateResp[srcTableName[tableNumber]]));
  jQuery('#ddl' + tableNumber).find('code').html(ddl[srcTableName[tableNumber]].split('\n').join(`<span class='sql-c'></span>`));
  jQuery('#summary' + tableNumber).find('.mdc-card.mdc-card-content.ddl-border.table-card-border').addClass(mdcCardBorder(conversionRateResp[srcTableName[tableNumber]]));
  jQuery('#summary' + tableNumber).find('.mdc-card.summary-content').html(summary[srcTableName[tableNumber]].split('\n').join('<br />'));
  tooltipHandler();
}

/**
 * Function to save changes of spanner table
 *
 * @param {event} event event generated by clicking edit spanner button
 * @param {array} spPlaceholder array to store number of selected constraints in spanner constraint cell
 * @param {array} tableOriginalColNames array to store original column names of a particular table
 * @return {null}
 */
const saveSpannerChanges = async (event, spPlaceholder, columnsNotNullConstraint) => {
  event.html("Edit Spanner Schema");
  let tableNumber = parseInt(event.attr('id').match(/\d+/), 10);
  let tableId = '#src-sp-table' + tableNumber + ' tr';
  let tableName;
  jQuery('#editInstruction' + tableNumber).css('visibility', 'visible');
  updatedColsData = {
    'UpdateCols': {
    }
  }
  jQuery(tableId).each(function (index) {
    if (index > 1) {
      tableName = srcTableName[tableNumber];
      let newColumnName;
      let tableColumnNumber = parseInt(jQuery(this).find('.srcColumn').attr('id').match(/\d+/), 10);
      let srcColumnName = jQuery(this).find('.srcColumn').html().trim();
      let newColumnNameEle = document.getElementById('columnNameText' + tableNumber + tableColumnNumber + tableColumnNumber);
      if (newColumnNameEle) {
        newColumnName = newColumnNameEle.value;
      }
      let originalColumnName = schemaConversionObj.ToSpanner[srcTableName[tableNumber]].Cols[srcColumnName];
      updatedColsData.UpdateCols[originalColumnName] = {};
      updatedColsData.UpdateCols[originalColumnName]['Removed'] = false;
      if (newColumnName === originalColumnName) {
        updatedColsData.UpdateCols[originalColumnName]['Rename'] = '';
      }
      else {
        let columnNameExists = false;
        let schemaConversionObj = JSON.parse(localStorage.getItem('conversionReportContent'));
        let columnsLength = Object.keys(schemaConversionObj.ToSpanner[tableName].Cols).length;
        for (var k = 0; k < columnsLength; k++) {
          if (k != tableColumnNumber && newColumnName == document.getElementById('columnNameText' + tableNumber + k + k).value && jQuery('#chckBox_' + k).is(":checked")) {
            jQuery('#editColumnNameErrorContent').html('');
            jQuery('#editColumnNameErrorModal').modal();
            jQuery('#editColumnNameErrorContent').append("Column : '" + newColumnName + "'" + ' already exists in table : ' + "'" + tableName + "'" + '. Please try with a different column name.')
            updatedColsData.UpdateCols[originalColumnName]['Rename'] = '';
            columnNameExists = true;
          }
        }
        if (!columnNameExists)
          updatedColsData.UpdateCols[originalColumnName]['Rename'] = newColumnName;
      }
      updatedColsData.UpdateCols[originalColumnName]['NotNull'] = '';
      updatedColsData.UpdateCols[originalColumnName]['PK'] = '';
      updatedColsData.UpdateCols[originalColumnName]['ToType'] = document.getElementById('dataType' + tableNumber + tableColumnNumber + tableColumnNumber).value;
      saveSpannerConstraints(tableNumber, tableColumnNumber, originalColumnName, columnsNotNullConstraint);
      if (!(jQuery(this).find("input[type=checkbox]").is(":checked"))) {
        updatedColsData.UpdateCols[originalColumnName]['Removed'] = true;
      }
      new vanillaSelectBox('#spConstraint' + tableNumber + tableColumnNumber, {
        placeHolder: spPlaceholder[tableColumnNumber] + " constraints selected",
        maxWidth: 500,
        maxHeight: 300
      });
    }
  })
  jQuery(tableId).each(function () {
    jQuery(this).find('.src-tab-cell .bmd-form-group').remove();
  });
  tooltipHandler();
  await fetch('/typemap/table?table=' + tableName, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(updatedColsData)
  })
    .then(async function (res) {
      if (res.ok) {
        responseCopy = res.clone();
        textRes = await responseCopy.text();
        localStorage.setItem('conversionReportContent', textRes);
        await ddlSummaryAndConversionApiCall();
        await createTableAfterChanges(JSON.parse(localStorage.getItem('conversionReportContent')), tableNumber, tableName);
        if (jQuery('#radioBtnArea' + tableNumber).is(':visible')) {
          setParentTable(tableNumber);
        }
        // showSnackbar('changes saved successfully !!', ' greenBg');
      }

      else {
        hideSpinner();
        res.text().then(function (response) {
          jQuery('#editTableWarningModal').modal();
          jQuery('#errorContent').html(response);
        });
        createTableAfterChanges(JSON.parse(localStorage.getItem('conversionReportContent')), tableNumber, tableName);
      }
    })
    .catch(function (err) {
      showSnackbar(err, ' redBg');
    });

  // save fk handler
  let fkLength, renameFkMap = {};
  let jsonObj = JSON.parse(localStorage.getItem('conversionReportContent'));
  if (jsonObj.SpSchema[srcTableName[tableNumber]].Fks != null && jsonObj.SpSchema[srcTableName[tableNumber]].Fks.length != 0) {
    fkLength = jsonObj.SpSchema[srcTableName[tableNumber]].Fks.length;
    for (let x = 0; x < fkLength; x++) {
      let newFkVal = document.getElementById('newFkVal' + tableNumber + x).value;
      jQuery('#renameFk' + tableNumber + x).addClass('template');
      if (jsonObj.SpSchema[srcTableName[tableNumber]].Fks[x].Name != newFkVal)
        renameFkMap[jsonObj.SpSchema[srcTableName[tableNumber]].Fks[x].Name] = newFkVal;
    }
    if (Object.keys(renameFkMap).length > 0) {
      let duplicateCheck = [];
      let duplicateFound = false;
      let keys = Object.keys(renameFkMap);
      keys.forEach(function (key) {
        for (let x = 0; x < fkLength; x++) {
          if (jsonObj.SpSchema[srcTableName[tableNumber]].Fks[x].Name === renameFkMap[key]) {
            jQuery('#editTableWarningModal').modal();
            jQuery('#errorContent').html('');
            jQuery('#errorContent').append("Foreign Key: " + renameFkMap[key] + " already exists in table: " + srcTableName[tableNumber] + ". Please try with a different name.");
            duplicateFound = true;
          }
        }
        if (duplicateCheck.includes(renameFkMap[key])) {
          jQuery('#editTableWarningModal').modal();
          jQuery('#errorContent').html('');
          jQuery('#errorContent').append('Please use a different name for each foreign key');
          duplicateFound = true;
        }
        else {
          duplicateCheck.push(renameFkMap[key]);
        }
      });
      switch (duplicateFound) {
        case true:
          // store previous state
          break;
        case false:
          await fetch('/rename/fks?table=' + srcTableName[tableNumber], {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(renameFkMap)
          })
            .then(async function (res) {
              if (res.ok) {
                res = await res.text();
                localStorage.setItem('conversionReportContent', res);
              }
              else {
                res = await res.text();
                jQuery('#editTableWarningModal').modal();
                jQuery('#errorContent').html(res);
              }
            })
          break;
      }
      jsonObj = JSON.parse(localStorage.getItem('conversionReportContent'));
      if (jsonObj.SpSchema[srcTableName[tableNumber]].Fks != null && jsonObj.SpSchema[srcTableName[tableNumber]].Fks.length != 0) {
        fkLength = jsonObj.SpSchema[srcTableName[tableNumber]].Fks.length;
        for (var x = 0; x < fkLength; x++) {
          jQuery('#saveFk' + tableNumber + x).removeClass('template').html(jsonObj.SpSchema[srcTableName[tableNumber]].Fks[x].Name);
        }
      }
    }
    else {
      jsonObj = JSON.parse(localStorage.getItem('conversionReportContent'));
      if (jsonObj.SpSchema[srcTableName[tableNumber]].Fks != null && jsonObj.SpSchema[srcTableName[tableNumber]].Fks.length != 0) {
        fkLength = jsonObj.SpSchema[srcTableName[tableNumber]].Fks.length;
        for (var x = 0; x < fkLength; x++) {
          jQuery('#saveFk' + tableNumber + x).removeClass('template').html(jsonObj.SpSchema[srcTableName[tableNumber]].Fks[x].Name);
        }
      }
    }
  }

  // save Secondary Index handler
  let secIndexLength, renameIndexMap = {};
  jsonObj = JSON.parse(localStorage.getItem('conversionReportContent'));
  if (jsonObj.SpSchema[srcTableName[tableNumber]].Indexes != null && jsonObj.SpSchema[srcTableName[tableNumber]].Indexes.length != 0) {
    secIndexLength = jsonObj.SpSchema[srcTableName[tableNumber]].Indexes.length;
    for (var x = 0; x < secIndexLength; x++) {
      let newSecIndexVal = document.getElementById('newSecIndexVal' + tableNumber + x).value;
      jQuery('#renameSecIndex' + tableNumber + x).addClass('template');
      if (jsonObj.SpSchema[srcTableName[tableNumber]].Indexes[x].Name != newSecIndexVal)
        renameIndexMap[jsonObj.SpSchema[srcTableName[tableNumber]].Indexes[x].Name] = newSecIndexVal;
    }
    if (Object.keys(renameIndexMap).length > 0) {
      let duplicateCheck = [];
      let duplicateFound = false;
      let keys = Object.keys(renameIndexMap);
      keys.forEach(function (key) {
        for (let x = 0; x < secIndexLength; x++) {
          if (jsonObj.SpSchema[srcTableName[tableNumber]].Indexes[x].Name === renameIndexMap[key]) {
            jQuery('#editTableWarningModal').modal();
            jQuery('#errorContent').html('');
            jQuery('#errorContent').append("Index: " + renameIndexMap[key] + " already exists in table: " + srcTableName[tableNumber] + ". Please try with a different name.");
            duplicateFound = true;
          }
        }
        if (duplicateCheck.includes(renameIndexMap[key])) {
          jQuery('#editTableWarningModal').modal();
          jQuery('#errorContent').html('');
          jQuery('#errorContent').append('Please use a different name for each secondary index');
          duplicateFound = true;
        }
        else {
          duplicateCheck.push(renameIndexMap[key]);
        }
      });
      switch (duplicateFound) {
        case true:
          // store previous state
          break;
        case false:
          await fetch('/rename/indexes?table=' + srcTableName[tableNumber], {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(renameIndexMap)
          })
            .then(async function (res) {
              if (res.ok) {
                res = await res.text();
                localStorage.setItem('conversionReportContent', res);
              }
              else {
                res = await res.text();
                jQuery('#editTableWarningModal').modal();
                jQuery('#errorContent').html(res);
              }
            })
          break;
      }
      jsonObj = JSON.parse(localStorage.getItem('conversionReportContent'));
      if (jsonObj.SpSchema[srcTableName[tableNumber]].Indexes != null && jsonObj.SpSchema[srcTableName[tableNumber]].Indexes.length != 0) {
        secIndexLength = jsonObj.SpSchema[srcTableName[tableNumber]].Indexes.length;
        for (var x = 0; x < secIndexLength; x++) {
          jQuery('#saveSecIndex' + tableNumber + x).removeClass('template').html(jsonObj.SpSchema[srcTableName[tableNumber]].Indexes[x].Name);
        }
      }
    }
    else {
      jsonObj = JSON.parse(localStorage.getItem('conversionReportContent'));
      if (jsonObj.SpSchema[srcTableName[tableNumber]].Indexes != null && jsonObj.SpSchema[srcTableName[tableNumber]].Indexes.length != 0) {
        secIndexLength = jsonObj.SpSchema[srcTableName[tableNumber]].Indexes.length;
        for (var x = 0; x < secIndexLength; x++) {
          jQuery('#saveSecIndex' + tableNumber + x).removeClass('template').html(jsonObj.SpSchema[srcTableName[tableNumber]].Indexes[x].Name);
        }
      }
    }
  }
}

/**
 * Function to save constraints for spanner table
 *
 * @param {number} tableNumber table number
 * @param {number} tableColumnNumber table column number
 * @param {string} originalColumnName
 * 
 * @return {null}
 */
const saveSpannerConstraints = (tableNumber, tableColumnNumber, originalColumnName, columnsNotNullConstraint) => {
  let constraintIndex = String(tableNumber) + String(tableColumnNumber);
  constraintIndex = parseInt(constraintIndex);

  if (notNullConstraint[constraintIndex] === 'Not Null') {
    updatedColsData.UpdateCols[originalColumnName]['NotNull'] = 'ADDED';
    columnsNotNullConstraint[tableColumnNumber] = true;
  }
  else if (notNullConstraint[constraintIndex] === '') {
    updatedColsData.UpdateCols[originalColumnName]['NotNull'] = 'REMOVED';
    columnsNotNullConstraint[tableColumnNumber] = false;
  }
}

/**
 * Function to call database connection api.
 *
 * @param {string} dbType Type of db like mysql, postgres, etc
 * @param {string} dbHost Database host
 * @param {number} dbPort Database port number
 * @param {string} dbUser Database user name
 * @param {string} dbName Database name
 * @param {string} dbPassword Database password
 * @return {null}
 */
const onconnect = (dbType, dbHost, dbPort, dbUser, dbName, dbPassword) => {
  let sourceTableFlag = '';
  showSpinner();
  fetch('/connect', {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      "Driver": dbType,
      "Database": dbName,
      "Password": dbPassword,
      "User": dbUser,
      "Port": dbPort,
      "Host": dbHost
    })
  })
    .then(function (res) {
      hideSpinner();
      if (res.ok) {
        if (dbType === 'mysql')
          sourceTableFlag = 'MySQL';
        else if (dbType === 'postgres')
          sourceTableFlag = 'Postgres';
        localStorage.setItem('sourceDbName', sourceTableFlag);
        jQuery('#connectToDbModal').modal('hide');
        jQuery('#connectModalSuccess').modal();

      }
      else {
        res.text().then(function () {
          jQuery('#connectToDbModal').modal('hide');
          jQuery('#connectModalFailure').modal();
        });
      }
    })
    .catch(function (err) {
      showSnackbar(err, ' redBg');
    })
}

/**
 * Function to render edit schema screen from connect to DB mode
 *
 * @return {null}
 */
const showSchemaAssessment = async () => {
  let reportDataResp, reportData, sourceTableFlag;
  showSpinner();
  reportData = await fetch('/convert/infoschema')
    .then(function (response) {
      if (response.ok) {
        return response;
      }
      else {
        return Promise.reject(response);
      }
    })
    .catch(function (err) {
      showSnackbar(err, ' redBg');
    });
  reportDataResp = await reportData.text();
  localStorage.setItem('conversionReportContent', reportDataResp);
  ddlSummaryAndConversionApiCall();
  jQuery('#connectModalSuccess').modal("hide");
  sourceTableFlag = localStorage.getItem('sourceDbName');
  sessionRetrieval(sourceTableFlag);
}

/**
 * Function to store db dump values in local storage
 *
 * @param {string} dbType selected db like mysql, postgres, etc
 * @param {string} filePath path entered for the dump file
 * @return {null}
 */
const storeDumpFileValues = (dbType, filePath) => {
  let sourceTableFlag = '';
  if (dbType === 'mysql') {
    localStorage.setItem('globalDbType', dbType + 'dump');
    sourceTableFlag = 'MySQL';
    localStorage.setItem('sourceDbName', sourceTableFlag);
  }
  else if (dbType === 'postgres') {
    localStorage.setItem('globalDbType', 'pg_dump');
    sourceTableFlag = 'Postgres';
    localStorage.setItem('sourceDbName', sourceTableFlag);
  }
  localStorage.setItem('globalDumpFilePath', filePath);
  onLoadDatabase(localStorage.getItem('globalDbType'), localStorage.getItem('globalDumpFilePath'));
}

/**
 * Function to call /convert/dump api to get con json structure
 *
 * @param {string} dbType selected db like mysql, postgres, etc
 * @param {string} dumpFilePath path entered for the dump file
 * @return {null}
 */
const onLoadDatabase = async (dbType, dumpFilePath) => {
  let reportData, sourceTableFlag, reportDataResp, reportDataCopy, jsonReportDataResp;
  reportData = await fetch('/convert/dump', {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      "Driver": dbType,
      "Path": dumpFilePath
    })
  });
  reportDataCopy = reportData.clone();
  requestCode = reportData.status;
  reportDataResp = await reportData.text();

  if (requestCode != 200) {
    hideSpinner();
    showSnackbar(reportDataResp, ' redBg');
    jQuery("#loadConnectButton").attr("disabled", "disabled");
    return;
  }
  else {
    jsonReportDataResp = await reportDataCopy.json();
    if (Object.keys(jsonReportDataResp.SpSchema).length == 0) {
      showSnackbar("Please select valid file", " redBg");
      jQuery("#loadConnectButton").attr("disabled", "disabled");
      return;
    }
    else {
      showSpinner();
      jQuery('#loadDatabaseDumpModal').modal('hide');
      localStorage.setItem('conversionReportContent', reportDataResp);
    }

  }
  ddlSummaryAndConversionApiCall();
  sourceTableFlag = localStorage.getItem('sourceDbName');
  sessionRetrieval(sourceTableFlag);
}

/**
 * Function to import schema and populate summary, ddl, conversion report panels
 *
 * @return {null}
 */
const onImport = async (filePath) => {
  let driver = '';
  let srcDb = localStorage.getItem('sourceDbName');
  if (srcDb === 'MySQL') {
    driver = 'mysqldump';
  }
  else if (srcDb === 'Postgres') {
    driver = 'pg_dump';
  }
  await fetch('/session/resume', {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      "Driver": driver,
      "DBName": '',
      "FilePath": filePath
    })
  })
    .then(async function (res) {
      if (res.ok) {
        responseCopy = res.clone();
        textResponse = await res.text();
        jsonResponse = await responseCopy.json();
        if (Object.keys(jsonResponse.SpSchema).length == 0) {
          showSnackbar('Please select valid session file', ' redBg');
          jQuery('#importButton').attr('disabled', 'disabled');
          return;
        }
        else {
          localStorage.setItem('conversionReportContent', textResponse);
          ddlSummaryAndConversionApiCall();
          jQuery('#importSchemaModal').modal('hide');
          sessionRetrieval(srcDb);
        }
      }
      else {
        showSnackbar('Please select valid session file', ' redBg');
        jQuery('#importButton').attr('disabled', 'disabled');
        return;
      }
    });
}

/**
 * Function to make ddl, summary and conversion api calls
 *
 * @return {null}
 */
const ddlSummaryAndConversionApiCall = async () => {
  let conversionRateResp, ddlDataResp, summaryDataResp;
  await fetch('/ddl')
    .then(async function (response) {
      if (response.ok) {
        ddlDataResp = await response.json();
        localStorage.setItem('ddlStatementsContent', JSON.stringify(ddlDataResp));
        await fetch('/summary')
          .then(async function (response) {
            if (response.ok) {
              summaryDataResp = await response.json();
              localStorage.setItem('summaryReportContent', JSON.stringify(summaryDataResp));
              await fetch('/conversion')
                .then(async function (response) {
                  if (response.ok) {
                    conversionRateResp = await response.json();
                    localStorage.setItem('tableBorderColor', JSON.stringify(conversionRateResp));
                    window.location.href = '#/schema-report';
                  }
                  else {
                    return Promise.reject(response);
                  }
                })
                .catch(function (err) {
                  showSnackbar(err, ' redBg');
                });
            }
            else {
              return Promise.reject(response);
            }
          })
          .catch(function (err) {
            showSnackbar(err, ' redBg');
          });
      }
      else {
        return Promise.reject(response);
      }
    })
    .catch(function (err) {
      showSnackbar(err, ' redBg');
    });
}

/**
 * Function to store each session by making an api call
 *
 * @param {string} dbType source db name
 * @return {null}
 */
const sessionRetrieval = (dbType) => {
  let sessionStorageArr;
  let sessionInfoResp;
  fetch('/session', {
    method: 'GET',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    }
  })
    .then(async function (res) {
      if (res.ok) {
        sessionInfoResp = await res.json();
        sessionStorageArr = JSON.parse(sessionStorage.getItem('sessionStorage'));
        if (sessionStorageArr == undefined)
          sessionStorageArr = [];
        sessionInfoResp.sourceDbType = dbType;
        sessionStorageArr.unshift(sessionInfoResp);
        sessionStorage.setItem('sessionStorage', JSON.stringify(sessionStorageArr));
      }
      else {
        sessionInfoResp = Promise.reject(res);
      }
    })
    .catch(function (err) {
      showSnackbar(err, ' redBg');
    });
}

/**
 * Function to check possibility for foreign key to interleave conversion for a table
 *
 * @param {number} index table index
 * @return {null}
 */
const checkInterleaveConversion = async (index) => {
  let interleaveApiCall, interleaveApiCallResp;
  let tableName = schemaConversionObj.SpSchema[Object.keys(schemaConversionObj.ToSpanner)[index]].Name;
  interleaveApiCall = await fetch('/setparent?table=' + tableName)
    .then(async function (response) {
      if (response.ok) {
        return response;
      }
      else {
        return Promise.reject(response);
      }
    })
    .catch(function (err) {
      showSnackbar(err, ' redBg');
    });
  interleaveApiCallResp = await interleaveApiCall.json();
  if (interleaveApiCallResp.Possible == false) {
    jQuery('#radioBtnArea' + index).css('display', 'none');
  }
}

/**
 * Function to convert foreign key into interleave table
 *
 * @param {number} index table index
 * @return {null}
 */
const setParentTable = async (index) => {
  let selectedValue;
  let radioGroup = 'fks' + index;
  let radioValues = document.querySelectorAll('input[name=' + radioGroup + ']');
  let tableName = schemaConversionObj.SpSchema[Object.keys(schemaConversionObj.ToSpanner)[index]].Name;
  for (const x of radioValues) {
    if (x.checked) {
      selectedValue = x.value;
      break;
    }
  }
  if (selectedValue == 'interleave') {
    await fetch('/setparent?table=' + tableName + '&update=' + true)
      .then(async function (res) {
        res = await res.text();
        localStorage.setItem("conversionReportContent", res);
        let jsonObj = JSON.parse(localStorage.getItem("conversionReportContent"));
        let table = jsonObj.SpSchema[Object.keys(jsonObj.SpSchema)[index]];
        if (table.Fks != null && table.Fks.length != 0) {
          let foreignKeyId, tableNumber;
          let $newFkCard = jQuery(".fkCard.template").clone().removeClass("template");
          $newFkCard.find('.fkFont').attr('href', '#foreignKey' + index);
          $newFkCard.find('fieldset').attr('id', 'radioBtnArea' + index);
          $newFkCard.find('.fkFont').html('Foreign Keys');
          $newFkCard.find('.collapse.fkCollapse').attr('id', 'foreignKey' + index);
          $newFkCard.find('.radio.addRadio').attr('id', 'add' + index);
          $newFkCard.find('#add' + index).attr('name', 'fks' + index);
          $newFkCard.find('.radio.interleaveRadio').attr('id', 'interleave' + index);
          $newFkCard.find('#interleave' + index).attr('name', 'fks' + index);
          checkInterleaveConversion(index);
          $newFkCard.find('.fkTableBody').attr('id', 'fkTableBody' + index);
          for (let p = 0; p < table.Fks.length; p++) {
            $fkTableContent = $newFkCard.find('.fkTableTr.template').clone().removeClass('template');
            $fkTableContent.find('.renameFk.template').attr('id', 'renameFk' + index + p);
            $fkTableContent.find('.saveFk.template').removeClass('template').attr('id', 'saveFk' + index + p).html(table.Fks[p].Name);
            $fkTableContent.find('.acc-table-td.fkTableColumns').html(table.Fks[p].Columns);
            $fkTableContent.find('.acc-table-td.fkTableReferTable').html(table.Fks[p].ReferTable);
            $fkTableContent.find('.acc-table-td.fkTableReferColumns').html(table.Fks[p].ReferColumns);
            $fkTableContent.find('button').attr('id', table.Name + p + 'foreignKey');
            $fkTableContent.appendTo($newFkCard.find('.fkTableBody'));
          }
          jQuery('#' + index).find(".collapse.fkCollapse .mdc-card.fk-content").html($newFkCard.find(".collapse.fkCollapse .mdc-card.fk-content").html());
          for (let p = 0; p < table.Fks.length; p++) {
            jQuery('#' + table.Name + p + 'foreignKey').click(function () {
              tableNumber = parseInt(jQuery(this).closest('.collapse.fkCollapse').attr('id').match(/\d+/), 10);
              foreignKeyId = jQuery(this).attr('id');
              localStorage.setItem('foreignKeyId', foreignKeyId);
              localStorage.setItem('tableNumber', tableNumber);
              jQuery('#foreignKeyDeleteWarning').modal();
            });
          }
        }
        else {
          jQuery('#' + index).find('.fkCard').addClass('template');
        }
      })
  }
  else {
    // showSnackbar('Response Saved', ' greenBg');
  }
}

/**
 * Function to drop foreign key from a particular table
 *
 * @return {null}
 */
const dropForeignKeyHandler = async () => {
  let tableNumber = localStorage.getItem('tableNumber');
  let foreignKeyId = localStorage.getItem('foreignKeyId');
  let foreignKeyArray = foreignKeyId.split(/([0-9]+)/);
  let tableName = foreignKeyArray[0];
  let pos = foreignKeyArray[1];
  await fetch('/drop/fk?table=' + tableName + '&pos=' + pos)
    .then(async function (response) {
      if (response.ok) {
        let responseCopy = response.clone();
        let jsonObj = await responseCopy.json();
        let textRresponse = await response.text();
        localStorage.setItem('conversionReportContent', textRresponse);
        if (jsonObj.SpSchema[tableName].Fks != null && jsonObj.SpSchema[tableName].Fks.length != 0) {
          let table = document.getElementById('fkTableBody' + tableNumber);
          let rowCount = table.rows.length;
          let keyFound;
          for (var x = 0; x < rowCount; x++) {
            keyFound = false;
            for (var y = 0; y < jsonObj.SpSchema[tableName].Fks.length; y++) {
              let oldFkVal = jQuery('#saveFk' + tableNumber + x).removeClass('template').html();
              if (jsonObj.SpSchema[tableName].Fks[y].Name === oldFkVal) {
                jQuery('#saveFk' + tableNumber + x).addClass('template');
                document.getElementById(tableName + x + 'foreignKey').id = tableName + y + 'foreignKey';
                document.getElementById('saveFk' + tableNumber + x).id = 'saveFk' + tableNumber + y;
                document.getElementById('renameFk' + tableNumber + x).id = 'renameFk' + tableNumber + y;
                document.getElementById('newFkVal' + tableNumber + x).id = 'newFkVal' + tableNumber + y;
                keyFound = true;
                break;
              }
            }
            if (keyFound == false) {
              z = x;
            }
          }
          table.deleteRow(z);
        }
        else {
          jQuery('#' + tableNumber).find('.fkCard').addClass('template');
        }
      }
      else {
        return Promise.reject(response);
      }
    })
    .catch(function (err) {
      showSnackbar(err, ' redBg');
    });
}


/**
 * Function to drop secondary index from a particular table
 *
 * @return {null}
 */
const dropSecondaryIndexHandler = async () => {
  let indexId = localStorage.getItem('indexId');
  let tableNumber = localStorage.getItem('secIndexTableNumber');
  let indexArray = indexId.split(/([0-9]+)/);
  let tableName = indexArray[0];
  let pos = indexArray[1];
  await fetch('/drop/secondaryindex?table=' + tableName + '&pos=' + pos)
    .then(async function (response) {
      if (response.ok) {
        let responseCopy = response.clone();
        let jsonObj = await responseCopy.json();
        let textRresponse = await response.text();
        localStorage.setItem('conversionReportContent', textRresponse);
        let table = document.getElementById('indexTableBody' + tableNumber);
        let rowCount = table.rows.length;
        if (jsonObj.SpSchema[tableName].Indexes != null && jsonObj.SpSchema[tableName].Indexes.length != 0) {
          let keyFound;
          for (var x = 0; x < rowCount; x++) {
            keyFound = false;
            for (var y = 0; y < jsonObj.SpSchema[tableName].Indexes.length; y++) {
              let oldSecIndex = jQuery('#saveSecIndex' + tableNumber + x).removeClass('template').html();
              if (jsonObj.SpSchema[tableName].Indexes[y].Name === oldSecIndex) {
                jQuery('#saveSecIndex' + tableNumber + x).addClass('template');
                document.getElementById(tableName + x + 'secIndex').id = tableName + y + 'secIndex';
                document.getElementById('saveSecIndex' + tableNumber + x).id = 'saveSecIndex' + tableNumber + y;
                document.getElementById('renameSecIndex' + tableNumber + x).id = 'renameSecIndex' + tableNumber + y;
                document.getElementById('newSecIndexVal' + tableNumber + x).id = 'newSecIndexVal' + tableNumber + y;
                keyFound = true;
                break;
              }
            }
            if (keyFound == false) {
              z = x;
            }
          }
          table.deleteRow(z);
        }
        else {
          for (var x = 0; x < rowCount; x++) {
            table.deleteRow(x);
          }
          jQuery('#' + tableNumber).find('.index-acc-table.fkTable').css('visibility', 'hidden');
          jQuery('#' + tableNumber).find('.index-acc-table.fkTable').addClass('importantRule0');
          jQuery('#' + tableNumber).find('.index-acc-table.fkTable').removeClass('importantRule100');
        }
      }
      else {
        return Promise.reject(response);
      }
    })
    .catch(function (err) {
      showSnackbar(err, ' redBg');
    });
}

/**
 * Function to create a new index for a table
 *
 * @param {string} id html id of 'add index' button
 * @return {null}
 */
const createNewSecIndex = (id) => {
  tableNumber = parseInt(id.match(/\d+/), 10);
  let jsonObj = JSON.parse(localStorage.getItem('conversionReportContent'));
  if (document.getElementById("editSpanner" + tableNumber).innerHTML.trim() == "Save Changes") {
    let tableId = '#src-sp-table' + tableNumber + ' tr';
    let pendingChanges = false;
    jQuery(tableId).each(function (index) {
      if (index > 1) {
        tableName = srcTableName[tableNumber];
        let newColumnName;
        let tableColumnNumber = parseInt(jQuery(this).find('.srcColumn').attr('id').match(/\d+/), 10);
        let srcColumnName = jQuery(this).find('.srcColumn').html().trim();
        let newColumnNameEle = document.getElementById('columnNameText' + tableNumber + tableColumnNumber + tableColumnNumber);
        if (newColumnNameEle) {
          newColumnName = newColumnNameEle.value;
        }
        let originalColumnName = jsonObj.ToSpanner[srcTableName[tableNumber]].Cols[srcColumnName];
        if (newColumnName !== originalColumnName || !(jQuery(this).find("input[type=checkbox]").is(":checked"))) {
          jQuery("#editTableWarningModal").modal();
          jQuery('#errorContent').html("");
          jQuery('#errorContent').append("There are pending changes to this table, please save the same before creating the index");
          pendingChanges = true;
        }
      }
    })
    if (pendingChanges) {
      return;
    }
  }
  jQuery('#createIndexModal').modal();
  keysList = [];
  let orderId = 0;
  let table = jsonObj.SpSchema[srcTableName[tableNumber]];
  let columnsLength = Object.keys(jsonObj.ToSpanner[table.Name].Cols).length;
  jQuery("#newIndexColumnListDiv").html("");
  for (let k = 0; k < columnsLength; k++) {
    let newIndexColumnRow = jQuery(".newIndexColumnList.template").clone().removeClass('template');
    newIndexColumnRow.find(".columnName").html(table.ColNames[k]);
    newIndexColumnRow.attr("id", "indexColumnRow" + k);
    newIndexColumnRow.appendTo(jQuery("#newIndexColumnListDiv"));
    newIndexColumnRow.find("input").click(function () {
      if (jQuery(this).is(':checked')) {
        orderId = orderId + 1;
        jQuery(this).closest(".newIndexColumnList").find(".orderId").html(orderId);
        jQuery(this).closest(".newIndexColumnList").find(".orderId").css("visibility", "visible");
        keysList.push({ "Col": jQuery(this).closest(".newIndexColumnList").find(".columnName").html(), "Desc": false });
      }
      else {
        let deletedOrderId = jQuery(this).closest(".newIndexColumnList").find(".orderId").html();
        jQuery(this).closest(".newIndexColumnList").find(".orderId").css("visibility", "hidden");
        let lastColumnSelected = true;
        let maxOrderId = 0;

        for (let x = 0; x < keysList.length; x++) {
          if (keysList[x].Col == jQuery(this).closest(".newIndexColumnList").find(".columnName").html()) {
            keysList.splice(x, 1);
          }
        }
        jQuery(this).closest(".newIndexColumnList").find(".orderId").css("visibility", "hidden");
        for (let x = 0; x < columnsLength; x++) {
          if (jQuery("#indexColumnRow" + x).find("input").is(":checked")) {
            lastColumnSelected = false;
            let currOrderId = jQuery("#indexColumnRow" + x).find(".orderId").html();
            jQuery(this).closest(".newIndexColumnList").find(".orderId").css("visibility", "hidden");
            if (currOrderId > deletedOrderId) {
              jQuery("#indexColumnRow" + x).find(".orderId").html(currOrderId - 1);
              jQuery(this).closest(".newIndexColumnList").find(".orderId").css("visibility", "none");
            }
          }
        }
        for (let x = 0; x < columnsLength; x++) {
          if (jQuery("#indexColumnRow" + x).find("input").is(":checked")) {
            let currOrderId = jQuery("#indexColumnRow" + x).find(".orderId").html();
            jQuery(this).closest(".newIndexColumnList").find(".orderId").css("visibility", "hidden");
            if (currOrderId > maxOrderId) {
              maxOrderId = currOrderId;
            }
          }
        }
        orderId = parseInt(maxOrderId);
      }
    })
  }
}

/**
 * Function to fetch values from create new index form
 *
 * @param {string} name new index name
 * @param {boolean} uniqueness
 * @return {null}
 */
const fetchIndexFormValues = async (name, uniqueness) => {
  if (keysList.length == 0) {
    showSnackbar("Please select atleast one key to create a new index", " redBg");
    return;
  }
  let newIndex = {}, newIndexPos;
  let jsonObj = JSON.parse(localStorage.getItem('conversionReportContent'));
  let table = jsonObj.SpSchema[srcTableName[tableNumber]];
  newIndex['Name'] = name;
  newIndex['Table'] = table.Name;
  if (uniqueness) {
    newIndex['Unique'] = true;
  }
  else {
    newIndex['Unique'] = false;
  }
  newIndex['Keys'] = keysList;
  if (table.Indexes != null && table.Indexes.length > 0) {
    newIndexPos = table.Indexes.length;
    for (let x = 0; x < table.Indexes.length; x++) {
      if (JSON.stringify(table.Indexes[x].Keys) === JSON.stringify(keysList)) {
        showSnackbar("Index with selected key(s) already exists.\n Please use different key(s)", " redBg");
        return;
      }
      else if (newIndex['Name'] === table.Indexes[x].Name) {
        showSnackbar("Index with name: " + newIndex['Name'] + " already exists.\n Please try with a different name", " redBg");
        return;
      }
    }
  }
  else {
    newIndexPos = 0;
  }

  await fetch("/add/indexes?table=" + table.Name, {
    method: 'POST',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    body: JSON.stringify([newIndex])
  })
    .then(async function (res) {
      if (res.ok) {
        clearModal();
        jQuery('#createIndexModal').modal('hide');
        res = await res.text();
        localStorage.setItem('conversionReportContent', res);
        let jsonObj = JSON.parse(localStorage.getItem('conversionReportContent'));
        let table = jsonObj.SpSchema[srcTableName[tableNumber]];
        let indexKeys;
        jQuery("#" + tableNumber).find('.index-acc-table.fkTable').css('visibility', 'visible');
        jQuery('#' + tableNumber).find('.index-acc-table.fkTable').addClass('importantRule100');
        jQuery('#' + tableNumber).find('.index-acc-table.fkTable').removeClass('importantRule0');
        $indexTableContent = jQuery('.indexTableTr.template').clone().removeClass('template');
        $indexTableContent.find('.renameSecIndex.template').attr('id', 'renameSecIndex' + tableNumber + newIndexPos);
        $indexTableContent.find('.saveSecIndex.template').attr('id', 'saveSecIndex' + tableNumber + newIndexPos);
        if (document.getElementById("editSpanner" + tableNumber).innerHTML.trim() == "Save Changes") {
          $indexTableContent.find('.renameSecIndex.template').removeClass('template').find("input").val(table.Indexes[newIndexPos].Name).attr('id', 'newSecIndexVal' + tableNumber + newIndexPos);
          $indexTableContent.find('button').removeAttr('disabled');
        }
        else {
          $indexTableContent.find('.saveSecIndex.template').removeClass('template').html(table.Indexes[newIndexPos].Name);;
        }
        $indexTableContent.find('.acc-table-td.indexesTable').html(table.Indexes[newIndexPos].Table);
        $indexTableContent.find('.acc-table-td.indexesUnique').html(table.Indexes[newIndexPos].Unique.toString());
        indexKeys = '';
        for (var k = 0; k < table.Indexes[newIndexPos].Keys.length; k++) {
          indexKeys += table.Indexes[newIndexPos].Keys[k].Col + ', '
        }
        indexKeys = indexKeys.replace(/,\s*$/, "");
        $indexTableContent.find('.acc-table-td.indexesKeys').html(indexKeys);
        $indexTableContent.find('button').attr('id', table.Name + newIndexPos + 'secIndex');
        $indexTableContent.find('#' + table.Name + newIndexPos + 'secIndex').click(function () {
          let indexId = jQuery(this).attr('id');
          let secIndexTableNumber = parseInt(jQuery(this).closest('.indexCollapse.collapse').attr('id').match(/\d+/), 10);
          localStorage.setItem('indexId', indexId);
          localStorage.setItem('secIndexTableNumber', secIndexTableNumber);
          jQuery('#secIndexDeleteWarning').modal();
        });
        $indexTableContent.appendTo(jQuery('#' + tableNumber).find('.indexTableBody'));
      }
      else {
        res = await res.text();
        showSnackbar(res, " redBg");
      }
    })
}

/**
 * Function to store session info
 *
 * @param {string} driver database driver
 * @param {string} path file path
 * @param {string} fileName file name
 * @param {string} sourceDb source db name
 * @return {null}
 */
const storeResumeSessionId = (driver, path, dbName, sourceDb) => {
  localStorage.setItem('driver', driver);
  localStorage.setItem('path', path);
  localStorage.setItem('dbName', dbName);
  localStorage.setItem('sourceDb', sourceDb);
  resumeSession(localStorage.getItem('driver'), localStorage.getItem('path'), localStorage.getItem('dbName'), localStorage.getItem('sourceDb'))
}

/**
 * Function to read file content when clicked on resume session
 *
 * @param {string} driver database driver
 * @param {string} path file path
 * @param {string} fileName file name
 * @param {string} sourceDb source db name
 * @return {null}
 */
const resumeSession = async (driver, path, dbName, sourceDb) => {
  let pathArray = path.split('/');
  let fileName = pathArray[pathArray.length - 1];
  let filePath = './' + fileName;
  readTextFile(filePath, async function (error, text) {
    if (error) {
      showSnackbar('File does not exist', ' redBg');
    }
    else {
      localStorage.setItem('conversionReportContent', text);
      localStorage.setItem('sourceDbName', sourceDb);
      await fetch('/session/resume', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          "Driver": driver,
          "DBName": dbName,
          "FilePath": path
        })
      })
        .then(function (response) {
          if (response.ok) {
            console.log(response);
          }
          else {
            Promise.reject(response);
          }
        })
        .catch(function (err) {
          showSnackbar(err, ' redBg');
        });
      ddlSummaryAndConversionApiCall();
    }
  });
}

/**
 * Function to handle resume session click event
 *
 * @param {number} index session index in the array
 * @param {array} sessionArray array of objects containing session information
 * @return {null}
 */
const resumeSessionHandler = (index, sessionArray) => {
  storeResumeSessionId(sessionArray[index].driver, sessionArray[index].filePath, sessionArray[index].dbName, sessionArray[index].sourceDbType);
}

/**
 * Callback function to read file content
 *
 * @param {file}
 * @return {null}
 */
const readTextFile = (file, callback) => {
  let rawFile = new XMLHttpRequest();
  rawFile.overrideMimeType("application/json");
  rawFile.open("GET", file, true);
  rawFile.onreadystatechange = function () {
    if (rawFile.status == "404") {
      callback(new Error('File does not exist'), null);
    }
    else if (rawFile.readyState == 4 && rawFile.status == "200") {
      callback(null, rawFile.responseText);
    }
  }
  rawFile.send(null);
}

/**
 * Function to check source schema while importing any file
 *
 * @param {string} val source db value (mysql or postgres)
 * @return {null}
 */
const storeSessionFilePath = (dbType, filePath) => {
  let sourceTableFlag = '';
  if (dbType === 'mysql') {
    sourceTableFlag = 'MySQL';
    localStorage.setItem('sourceDbName', sourceTableFlag);
  }
  else if (dbType === 'postgres') {
    sourceTableFlag = 'Postgres';
    localStorage.setItem('sourceDbName', sourceTableFlag);
  }
  onImport(filePath);
}

/**
 * Function to render home screen html
 *
 * @return {null}
 */
const homeScreen = () => {
  jQuery('#app').load('./main-screen.html');
}