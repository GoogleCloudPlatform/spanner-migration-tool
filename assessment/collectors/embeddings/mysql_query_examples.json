[
    {
      "id": "1",
      "example": "How to create tables with UUIDs, Enums, Dates, and insert data into them, while also creating a unique index in Spanner?",
      "rewrite": {
        "theory": "Spanner uses `GENERATE_UUID()` for UUID generation, `STRING()` for Enum types, and `INT64` for `INT` and `SMALLINT`. Unique indexes are created separately after table creation.",
        "options": [
          {
            "mysql_code": "create table Employee(\nid varchar(36) PRIMARY key,\nemployee_id INT UNIQUE,\nname VARCHAR(30),\nemployee_type enum('Manager',\"Employee\"),\nlevel smallint,\ndoj date,\ndesignation VARCHAR(20)\n);\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( uuid(),1,'ABhishek','Manager', 2,'2023-12-31', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( uuid(),2,'Ashwin','Manager', 3,'2021-12-31', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( uuid(),3,'Ashish','Employee', 4,'2021-10-31', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( uuid(),4,'Hassan','Employee', 5,'2023-01-21', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( uuid(),5,'Yasvi','Employee', 6,'2022-03-12', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( uuid(),6,'Sharmili','Employee', 7,'2022-11-21', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( uuid(),7,'Muskan','Employee', 8,'2022-03-31', 'Engineering Manager');",
            "spanner_code": "CREATE TABLE Employee (\nid STRING(36),\nemployee_id INT64,\nname STRING(30),\nemployee_type STRING(30),\nlevel INT64,\ndoj DATE,\ndesignation STRING(20),\n) PRIMARY KEY (id);\nCREATE UNIQUE INDEX uk_employee_id ON Employee(employee_id);\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( GENERATE_UUID(),1,'ABhishek','Manager', 2,'2023-12-31', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( GENERATE_UUID(),2,'Ashwin','Manager', 3,'2021-12-31', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( GENERATE_UUID(),3,'Ashish','Employee', 4,'2021-10-31', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( GENERATE_UUID(),4,'Hassan','Employee', 5,'2023-01-21', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( GENERATE_UUID(),5,'Yasvi','Employee', 6,'2022-03-12', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( GENERATE_UUID(),6,'Sharmili','Employee', 7,'2022-11-21', 'Engineering Manager');\ninsert into Employee(id,employee_id,name,employee_type,level,doj,designation)\nvalues( GENERATE_UUID(),7,'Muskan','Employee', 8,'2022-03-31', 'Engineering Manager');"
          }
        ]
      }
    },
    {
      "id": "2",
      "example": "How to define and insert data into tables with foreign key constraints, `TEXT` and `BLOB` data types in Spanner?",
      "rewrite": {
        "theory": "Spanner supports foreign key constraints. `TEXT` in MySQL maps to `STRING(MAX)` in Spanner, and `BLOB` maps to `BYTES` with a specified length or `BYTES(MAX)`.",
        "options": [
          {
            "mysql_code": "create table Employee_Details(\nid varchar(36) PRIMARY key,\nemployee_id int ,\naddress text,\ndob date not null,\nother_details blob,\nconstraint FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(uuid(),1,'Koramanagla Bangalore 560048', '1988-01-14',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(uuid(),2,\"Mahadeva Bangalore 560018\", '1992-01-24',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(uuid(),3,\"Goregaon Mumbai 560025\", '1998-01-14',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(uuid(),4,\"CannaughtPlace 560088\", '1998-01-14',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(uuid(),5,\"Sarjapura Bangalore 560035\", '1998-05-14',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(uuid(),6,\"Whitefield Bangalore 560010\", '1988-01-14',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(uuid(),7,\"Indiranagar Bangalore 560001\", '1996-11-18',null);",
            "spanner_code": "create table Employee_Details(\nid String(36) ,\nemployee_id int64 ,\naddress String(MAX),\ndob date not null,\nother_details Bytes(100),\nconstraint FK_ED FOREIGN KEY (employee_id) REFERENCES Employee(employee_id)\n) PRIMARY KEY (id);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(GENERATE_UUID(),1,'Koramanagla Bangalore 560048', '1988-01-14',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(GENERATE_UUID(),2,'Mahadeva Bangalore 560018', '1992-01-24',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(GENERATE_UUID(),3,'Goregaon Mumbai 560025', '1998-01-14',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(GENERATE_UUID(),4,'CannaughtPlace 560088', '1998-01-14',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(GENERATE_UUID(),5,'Sarjapura Bangalore 560035', '1998-05-14',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(GENERATE_UUID(),6,'Whitefield Bangalore 560010', '1988-01-14',null);\ninsert into Employee_Details (id,employee_id, address,dob,other_details) values\n(GENERATE_UUID(),7,'Indiranagar Bangalore 560001', '1996-11-18',null);"
          }
        ]
      }
    },
    {
      "id": "3",
      "example": "How to create a table with multiple foreign key constraints and a composite primary key in Spanner?",
      "rewrite": {
        "theory": "Spanner supports multiple foreign key constraints within a table definition. For a composite primary key, list all columns that form the primary key within the `PRIMARY KEY` clause.",
        "options": [
          {
            "mysql_code": "CREATE TABLE Employee_Manager( employee_id int,\nmanager_id int,\nCONSTRAINT FOREIGN KEY (employee_id) REFERENCES Employee(employee_id),\nCONSTRAINT FOREIGN KEY (manager_id) REFERENCES Employee(employee_id) )\ninsert into Employee_Manager ( employee_id,manager_id) values ( 1,2);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 2,2);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 3,2);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 4,1);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 5,1);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 6,1);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 7,1);",
            "spanner_code": "CREATE TABLE Employee_Manager( employee_id int64,\nmanager_id int64,\nCONSTRAINT FK_EM FOREIGN KEY (employee_id) REFERENCES Employee(employee_id))\nPRIMARY KEY (employee_id,manager_id);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 1,2);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 2,2);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 3,2);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 4,1);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 5,1);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 6,1);\ninsert into Employee_Manager ( employee_id,manager_id) values ( 7,1);"
          }
        ]
      }
    },
    {
      "id": "4",
      "example": "How to handle unique key constraints where NULL is allowed and insert data into such a table in Spanner?",
      "rewrite": {
        "theory": "In Spanner, unique indexes allow `NULL` values. If multiple rows have `NULL` for a column in a unique index, they are all considered unique. If a unique key includes multiple columns, and any of them is `NULL`, the combination is considered unique.",
        "options": [
          {
            "mysql_code": "create table Employee_chat_history(\nid int PRIMARY key,\nsender int,\nreceiver int,\nsender_name varchar(40),\nreceiver_name varchar(40),\nchat JSON,\nCONSTRAINT uK Unique key (sender,receiver)\n);\ninsert into Employee_chat_history (id,sender,receiver,sender_name,receiver_name) values (1, 1,null,'Ashwin',null);\ninsert into Employee_chat_history (id,sender,receiver,sender_name,receiver_name) values (2, 1,null,'Ashwin',null);\ninsert into Employee_chat_history (id,sender,receiver,sender_name,receiver_name) values (1, 1,null,'Ashwin',null);\ninsert into Employee_chat_history (id,sender,receiver,sender_name,receiver_name) values (2, 1,null,'Ashwin',null);",
            "spanner_code": "create table Employee_chat_history(\nid int64 ,\nsender int64,\nreceiver int64,\nsender_name String(40),\nreceiver_name String(40),\nchat JSON\n) PRIMARY key(id);\nCREATE UNIQUE INDEX uk_ech ON Employee_chat_history(sender,receiver);\ninsert into Employee_chat_history (id,sender,receiver,sender_name,receiver_name) values (1, 1,null,'Ashwin',null);\ninsert into Employee_chat_history (id,sender,receiver,sender_name,receiver_name) values (2, 1,null,'Ashwin',null);"
          }
        ]
      }
    },
    {
      "id": "5",
      "example": "How to create a table and insert data into it using `GENERATE_UUID()` for the primary key in Spanner?",
      "rewrite": {
        "theory": "Spanner allows `GENERATE_UUID()` to generate unique IDs for primary keys. You need to explicitly include the `id` column in your `INSERT` statement and use `GENERATE_UUID()` for its value.",
        "options": [
          {
            "mysql_code": "CREATE TABLE sales (\nproduct VARCHAR(50),\nregion VARCHAR(50),\namount INT\n);\nINSERT INTO sales VALUES ('Laptop', 'North', 1000);\nINSERT INTO sales VALUES ('Laptop', 'South', 1200);\nINSERT INTO sales VALUES ('Desktop', 'North', 800);\nINSERT INTO sales VALUES ('Desktop', 'South', 900);\nINSERT INTO sales VALUES ('Tablet', 'North', 500);\nINSERT INTO sales VALUES ('Tablet', 'South', 600);",
            "spanner_code": "CREATE TABLE sales (\nid String(50),\nproduct String(50),\nregion String(50),\namount INT64\n) primary key(id);\nINSERT INTO sales(id,product,region,amount) VALUES (GENERATE_UUID(),'Laptop', 'North', 1000);\nINSERT INTO sales(id,product,region,amount) VALUES (GENERATE_UUID(),'Laptop', 'South', 1200);\nINSERT INTO sales(id,product,region,amount) VALUES (GENERATE_UUID(),'Desktop', 'North', 800);\nINSERT INTO sales(id,product,region,amount) VALUES (GENERATE_UUID(),'Desktop', 'South', 900);\nINSERT INTO sales(id,product,region,amount) VALUES (GENERATE_UUID(),'Tablet', 'North', 500);\nINSERT INTO sales(id,product,region,amount) VALUES (GENERATE_UUID(),'Tablet', 'South', 600);"
          }
        ]
      }
    },
    {
      "id": "6",
      "example": "How to perform a join using a subquery in Spanner?",
      "rewrite": {
        "theory": "Spanner supports joins with subqueries in a similar way to MySQL. Ensure the data types used in the join condition are compatible.",
        "options": [
          {
            "mysql_code": "SELECT e.* FROM Employee e JOIN (SELECT employee_id FROM Employee_Details d WHERE d.address LIKE '%Bangalore%') t ON e.employee_id = t.employee_id;",
            "spanner_code": "SELECT e.* FROM Employee e JOIN (SELECT employee_id FROM Employee_Details d WHERE d.address LIKE '%Bangalore%') t ON e.employee_id = t.employee_id;"
          }
        ]
      }
    },
    {
      "id": "7",
      "example": "How to use the `ROW_NUMBER()` window function in Spanner?",
      "rewrite": {
        "theory": "Spanner supports the `ROW_NUMBER()` window function. It functions identically to MySQL for assigning sequential integers to rows within a partition.",
        "options": [
          {
            "mysql_code": "SELECT * FROM Employee e JOIN (SELECT e.employee_id, e.address, e.dob, ROW_NUMBER() OVER(ORDER BY e.dob) AS row_number1 FROM Employee_Details e WHERE e.dob >'1990-01-01' ) t ON e.employee_id = t.employee_id WHERE t.row_number1 =1;",
            "spanner_code": "SELECT * FROM Employee e JOIN (SELECT e.employee_id, e.address, e.dob, ROW_NUMBER() OVER(ORDER BY e.dob) AS row_number1 FROM Employee_Details e WHERE e.dob >'1990-01-01' ) t ON e.employee_id = t.employee_number WHERE t.row_number1 =1;"
          }
        ]
      }
    },
    {
      "id": "8",
      "example": "How to use subqueries with `NOT IN` clause in Spanner?",
      "rewrite": {
        "theory": "Spanner supports subqueries within `WHERE` clauses, including with the `NOT IN` operator. The behavior is consistent with MySQL.",
        "options": [
          {
            "mysql_code": "SELECT * FROM Employee e WHERE employee_id NOT IN (SELECT employee_id FROM Employee_Details d WHERE employee_id != 5)",
            "spanner_code": "SELECT * FROM Employee e WHERE employee_id NOT IN (SELECT employee_id FROM Employee_Details d WHERE employee_id != 5)"
          }
        ]
      }
    },
    {
      "id": "9",
      "example": "How to use `COALESCE` with multiple subqueries in Spanner?",
      "rewrite": {
        "theory": "Spanner's `COALESCE` function works similarly to MySQL, returning the first non-NULL expression from a list. It can effectively be used with subqueries.",
        "options": [
          {
            "mysql_code": "SELECT COALESCE( (SELECT e.name FROM Employee e JOIN Employee_Details d ON e.employee_id = d.employee_id WHERE d.address LIKE '%Pune' LIMIT 1), (SELECT e.name FROM Employee e JOIN Employee_Details d ON e.employee_id = d.employee_id WHERE d.address LIKE '%Delhi' LIMIT 1 ), (SELECT e.name FROM Employee e JOIN Employee_Details d ON e.employee_id = d.employee_id WHERE d.address LIKE '%Bangalore%' LIMIT 1));",
            "spanner_code": "SELECT COALESCE( (SELECT e.name FROM Employee e JOIN Employee_Details d ON e.employee_id = d.employee_id WHERE d.address LIKE '%Pune' LIMIT 1), (SELECT e.name FROM Employee e JOIN Employee_Details d ON e.employee_id = d.employee_id WHERE d.address LIKE '%Delhi' LIMIT 1 ), (SELECT e.name FROM Employee e JOIN Employee_Details d ON e.employee_id = d.employee_id WHERE d.address LIKE '%Bangalore%' LIMIT 1));"
          }
        ]
      }
    },
    {
      "id": "10",
      "example": "How to perform an `UPDATE` statement with nested subqueries in Spanner?",
      "rewrite": {
        "theory": "Spanner supports `UPDATE` statements with nested subqueries in the `WHERE` clause. When updating `BLOB` equivalent data types, Spanner requires a byte string literal (e.g., `b'...'`).",
        "options": [
          {
            "mysql_code": "UPDATE Employee_Details SET other_details = 'test2' WHERE employee_id IN (SELECT t.employee_id FROM Employee t WHERE t.name <> 'Ashwin' AND t.level IN (SELECT level FROM Employee e WHERE e.employee_id IN (SELECT employee_id FROM Employee WHERE level >1) ) )",
            "spanner_code": "UPDATE Employee_Details SET other_details = b'123' WHERE employee_id IN (SELECT t.employee_id FROM Employee t WHERE t.name <> 'Ashwin' AND t.level IN (SELECT level FROM Employee e WHERE e.employee_id IN (SELECT employee_id FROM Employee WHERE level >1) ) );"
          }
        ]
      }
    },
    {
      "id": "11",
      "example": "How to perform an `UPSERT` (Insert or Ignore / On Duplicate Key Update) operation in Spanner?",
      "rewrite": {
        "theory": "Spanner doesn't directly support `INSERT IGNORE` or `ON DUPLICATE KEY UPDATE`. Instead, you use `INSERT OR IGNORE` for scenarios where you want to skip insertion on duplicate keys. For updates on duplicate keys, you'll typically need to check for existence first and then perform an `UPDATE` or `INSERT` conditionally in your application logic.",
        "options": [
          {
            "mysql_code": "INSERT IGNORE INTO Employee_Details (id,employee_id,address,dob,other_details) VALUES ('27ec8b5f-a1d1-11ef-96dc-42010a400002',1,'Koramanagla Bangalore 560048', '1988-01-14',NULL) ON DUPLICATE KEY UPDATE id = '27ec8b5f-a1d1-11ef-96dc-42010a400002',employee_id=employee_id+12,address='new Address';",
            "spanner_code": "INSERT OR IGNORE Employee_Details (id,employee_id,address,dob,other_details) VALUES ('27ec8b5f-a1d1-11ef-96dc-42010a400002',18,'Koramanagla Bangalore 560048', '1988-01-14',NULL);"
          }
        ]
      }
    },
    {
        "id": "12",
        "example": "How to handle REPLACE INTO in Spanner?",
        "rewrite": {
          "theory": "Spanner doesn't directly support `REPLACE INTO`. Instead, you need to update your application logic to delete the existing record if it exists and then insert the new record.",
          "options": [
            {
              "mysql_code": "REPLACE INTO Employee_Details (id,employee_id,address,dob,other_details) VALUES ('27ec8b5f-a1d1-11ef-96dc-42010a400002',1,'Koramanagla Bangalore 560048', '1988-01-14',NULL) ;",
              "spanner_code": "DELETE FROM Employee_Details WHERE id='27ec8b5f-a1d1-11ef-96dc-42010a400002'; INSERT INTO Employee_Details (id,employee_id,address,dob,other_details) VALUES ('27ec8b5f-a1d1-11ef-96dc-42010a400002',18,'Koramanagla Bangalore 560048', '1988-01-14',NULL);"
            }
          ]
        }
      }
]