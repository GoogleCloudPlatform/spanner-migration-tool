----------------------------
Summary of Conversion
----------------------------
Schema conversion: POOR ( 0% of 19006 columns mapped cleanly) + some missing primary keys.
Data conversion: POOR (66% of 6000 rows written to Spanner).

The remainder of this report provides stats on the pg_dump statements processed,
followed by a table-by-table listing of SCHEMA_AND_DATA conversion details. For
background on the SCHEMA_AND_DATA conversion process used, and explanations of
the terms and notes used in this report, see Spanner migration tool's README.

----------------------------
Statements Processed
----------------------------
Analysis of statements in pg_dump output, broken down by statement type.
  schema: statements successfully processed for Spanner schema information.
    data: statements successfully processed for data.
    skip: statements not relevant for Spanner schema or data.
   error: statements that could not be processed.
  --------------------------------------
  schema   data   skip  error  statement
  --------------------------------------
       5      0      0      0  CreateStmt
See github.com/pganalyze/pg_query_go for definitions of statement types
(pganalyze/pg_query_go is the library we use for parsing pg_dump output).

No Name Changes in Migration
----------------------------
Table bad_schema
----------------------------
Schema conversion: POOR ( 0% of 4 columns mapped cleanly) + missing primary key.
Data conversion: OK (94% of 1000 rows written to Spanner).

Warnings
1) Table 'bad_schema': Some columns will consume more storage in Spanner e.g. for
   column 'b', source DB type int4 is mapped to Spanner data type int64.
2) Table 'bad_schema': Column 'c', type int4[4][2] is mapped to string(max).
   Spanner doesn't support multi-dimensional arrays.
3) Table 'bad_schema': Column 'd', type circle is mapped to string(max). No
   appropriate Spanner type. The column will be made nullable in Spanner.
4) Column 'synth_id' was added because table 'bad_schema' didn't have a primary
   key. Spanner requires a primary key for every table.

----------------------------
Table default_value
----------------------------
Schema conversion: EXCELLENT (100% of 2 columns mapped cleanly).
Data conversion: NONE (100% of 0 rows written to Spanner).

Note
1) Some columns have default values which Spanner migration tool does not
   migrate. Please add the default constraints manually after the migration is
   complete for table 'default_value' e.g. column 'b'.

----------------------------
Table excellent_schema
----------------------------
Schema conversion: EXCELLENT (100% of 2 columns mapped cleanly).
Data conversion: NONE (100% of 0 rows written to Spanner).

----------------------------
Table foreign_key
----------------------------
Schema conversion: POOR (100% of 2 columns mapped cleanly).
Data conversion: NONE (100% of 0 rows written to Spanner).

Warnings
1) Table 'foreign_key': ON DELETE action of Foreign Key '' mapped from RESTRICT
   to NO ACTION - Spanner supports only ON DELETE CASCADE/NO ACTION.
2) Table 'foreign_key': ON UPDATE action of Foreign Key '' mapped from CASCADE to
   NO ACTION - Spanner supports only ON UPDATE NO ACTION.

----------------------------
Table no_pk
----------------------------
Schema conversion: POOR ( 0% of 3 columns mapped cleanly) + missing primary key.
Data conversion: POOR (60% of 5000 rows written to Spanner).

Warnings
1) Table 'no_pk': Column 'a', Array datatype migration is not fully supported.
   Please validate data after data migration.
2) Table 'no_pk': Some columns will consume more storage in Spanner e.g. for
   column 'b', source DB type int4 is mapped to Spanner data type int64.
3) Column 'synth_id' was added because table 'no_pk' didn't have a primary key.
   Spanner requires a primary key for every table.

----------------------------
Unexpected Conditions
----------------------------
For debugging only. This section provides details of unexpected conditions
encountered as we processed the pg_dump data. In particular, the AST node
representation used by the pganalyze/pg_query_go library used for parsing
pg_dump output is highly permissive: almost any construct can appear at
any node in the AST tree. The list details all unexpected nodes and
conditions.
  --------------------------------------
   count  condition
  --------------------------------------
       5  Testing unexpected messages

